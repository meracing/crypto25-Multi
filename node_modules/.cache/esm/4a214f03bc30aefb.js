let chalk;_bc3‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);const Bitvavo = require('bitvavo');


const intervalTimeout = 1000;
const client = new Bitvavo({
    apiKey: '8383a928926d27fc79ffa3819002b3842175a32a2625eabecb00c6d259b1248f',
    apiSecret: '1b85fd8537e70830b6d61f8de47694b9b0ca11cba9d43428bc9c0e8462e190d083f6f85b0232d75d07f43086bdc937d49a91caf20dc46e871639f602460ab6ff',
    apiUrl: 'https://api.bitvavo.com/v2'
});
const states = {
    BUY: 'buy',
    SELL: 'sell'
}
const debug = true;

let lastPrices = [],
    buyPrice = 0,
    maxPrice = 0,
    minPrice = 0,
    state = states.BUY;

async function getCurrentPrice() {
    if (debug) {
        return getTestPrice();
    }
    const result = await client.tickerPrice({market: 'BTC-EUR'});
    return result.price;
}

async function checkPrices() {
    let cp = await getCurrentPrice(),
        reason;

    maxPrice = cp > maxPrice ? cp : maxPrice;
    minPrice = cp < minPrice ? cp : minPrice;

    if (state === states.BUY) {
        if (cp >= (lastPrices[2] * 1.0025)) {
            reason = 'Current price is higher then latest price with minimum of 0.025%';
        } else if (cp >= (lastPrices[1] * 1.0028)) {
            reason = 'Current price is higher then second latest price with minimum of 0.028%';
        } else if (cp >= (lastPrices[0] * 1.0030)) {
            reason = 'Current price is higher then third latest price with minimum of 0.030%';
        }

        if (reason) {
            buy(reason, cp);

            reason = null;
            buyPrice = maxPrice = cp; // Get buy price from buy call when used.
            state = states.SELL;
        }
    } else if (state === states.SELL) {
        if (cp >= (buyPrice * 1.02)) {
            reason = 'Current price is higher than buy price with minimum of 2%'
        } else if (cp <= (lastPrices[2] * 1.003)) {
            reason = 'Current price is less then latest price with minimum of 0.03% (Stop loss)'
        } else if (cp <= (lastPrices[1] * 1.004) ) {
            reason = 'Current price is less then second latest price with minimum of 0.4% (Stop loss)'
        } else if (cp <= (lastPrices[0] * 1.004)) {
            reason = 'Current price is less then third price with minimum of 0.04% (Stop loss)'
        }

        if (reason) {
            sell(reason, cp, buyPrice);

            buyPrice = 0;
            // minPrice = 0;
            state = states.BUY;
        }
    }

    lastPrices.push(cp);
    lastPrices.shift();

    _bc3‍.g.console.log(lastPrices, 'MAX: ' + maxPrice, 'MIN: ' + minPrice);
}

function buy (reason, cp) {
    log(states.BUY, cp, reason);
}

function sell (reason, cp, buyPrice) {
    log(states.SELL, cp, reason, buyPrice);
}

function log(state, message, cp, buyPrice) {
    state = state.toUpperCase();

    if (state === states.BUY) {
        _bc3‍.g.console.info(chalk.red(state, message, cp));
    } else {
        _bc3‍.g.console.info(chalk.green(state, message, cp, buyPrice));
    }
}

// Start application
let priceInterval = setInterval(async ()=>{
    let cp = await getCurrentPrice();
    lastPrices.push(cp);

    minPrice = minPrice === 0 ? cp : minPrice;

    maxPrice = cp > maxPrice ? cp : maxPrice;
    minPrice = cp < minPrice ? cp : minPrice;

    if (lastPrices.length === 3) {
        setInterval(()=>{
            checkPrices();
        }, intervalTimeout);

        clearInterval(priceInterval);
    }
}, intervalTimeout);


// Testing functionality
let testPriceIndex = 0;
function getTestPrice () {
    let price = testData[testPriceIndex];
    testPriceIndex++;

    if (testPriceIndex > testData.length - 1) {
        testPriceIndex = 0;
    }

    return price;
}

const testData = [
    56000.23,
    59000.12,
    62100.45,
    57800.87,
    61150.00,
    63200.12,
    64890.54,
    67540.23,
    70120.45,
    68900.12,
    67210.32,
    69050.23,
    71900.87,
    73750.00,
    74500.12,
    77200.54,
    78900.23,
    80500.45,
    81200.12,
    79850.32,
    78700.23,
    80150.87,
    82200.00,
    84000.12,
    86000.54,
    87500.23,
    90100.45,
    92900.12,
    94500.32,
    97300.23,
    99500.87,
    102000.00,
    103500.12,
    106000.54,
    109500.23,
    112000.45,
    114200.12,
    116500.32,
    118000.23,
    121000.87,
    123500.00,
    126000.12,
    128500.54,
    132000.23,
    135500.45,
    138200.12,
    140500.32,
    143000.23,
    146000.87,
    148500.00,
    151000.12,
    154000.54,
    156500.23,
    160000.45,
    162500.12,
    165500.32,
    168000.23,
    171000.87,
    174500.00,
    177000.12,
    180000.54,
    183500.23,
    186500.45,
    189000.12,
    191500.32,
    194000.23,
    197000.87,
    199500.00,
    202000.12,
    205000.54,
    208500.23,
    211500.45,
    214000.12,
    217500.32,
    220000.23,
    223000.87,
    226500.00,
    229000.12,
    232000.54,
    235500.23,
    238500.45,
    241000.12,
    244500.32,
    247000.23,
    250000.87,
    253500.00,
    256000.12,
    259000.54,
    262500.23,
    265500.45,
    268000.12,
    271500.32,
    274000.23,
    277000.87,
    280500.00,
    283000.12,
    286000.54,
    289500.23,
    292500.45,
    295000.12,
    298500.32,
    301000.23,
    304000.87,
    307500.00,
    310000.12,
    313000.54]

